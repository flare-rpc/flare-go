// Code generated by protoc-gen-flarego. DO NOT EDIT.
// versions:
// - protoc-gen-flarego v0.3.0
// - protoc          v3.12.4
// source: echo.proto

package echo

import (
	context "context"
	client "github.com/flare-rpc/flarego/client"
	protocol "github.com/flare-rpc/flarego/protocol"
	server "github.com/flare-rpc/flarego/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = context.TODO
var _ = server.NewServer
var _ = client.NewClient
var _ = protocol.NewMessage

//================== interface skeleton ===================
type EchoServerAble interface {
	// EchoServerAble can be used for interface verification.

	// Echo is server rpc method as defined
	Echo(ctx context.Context, args *EchoRequest, reply *EchoResponse) (err error)
}

//================== server skeleton ===================
type EchoServerImpl struct{}

// ServeForEchoServer starts a server only registers one service.
// You can register more services and only start one server.
// It blocks until the application exits.
func ServeForEchoServer(addr string) error {
	s := server.NewServer()
	s.RegisterName("EchoServer", new(EchoServerImpl), "")
	return s.Serve("tcp", addr)
}

// Echo is server rpc method as defined
func (s *EchoServerImpl) Echo(ctx context.Context, args *EchoRequest, reply *EchoResponse) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = EchoResponse{}

	return nil
}

//================== client stub ===================
// EchoServer is a client wrapped XClient.
type EchoServerClient struct {
	xclient client.XClient
}

// NewEchoServerClient wraps a XClient as EchoServerClient.
// You can pass a shared XClient object created by NewXClientForEchoServer.
func NewEchoServerClient(xclient client.XClient) *EchoServerClient {
	return &EchoServerClient{xclient: xclient}
}

// NewXClientForEchoServer creates a XClient.
// You can configure this client with more options such as etcd registry, serialize type, select algorithm and fail mode.
func NewXClientForEchoServer(addr string) (client.XClient, error) {
	d, err := client.NewPeer2PeerDiscovery("tcp@"+addr, "")
	if err != nil {
		return nil, err
	}

	opt := client.DefaultOption
	opt.SerializeType = protocol.ProtoBuffer

	xclient := client.NewXClient("EchoServer", client.Failtry, client.RoundRobin, d, opt)

	return xclient, nil
}

// Echo is client rpc method as defined
func (c *EchoServerClient) Echo(ctx context.Context, args *EchoRequest) (reply *EchoResponse, err error) {
	reply = &EchoResponse{}
	err = c.xclient.Call(ctx, "Echo", args, reply)
	return reply, err
}

//================== oneclient stub ===================
// EchoServerOneClient is a client wrapped oneClient.
type EchoServerOneClient struct {
	serviceName string
	oneclient   *client.OneClient
}

// NewEchoServerOneClient wraps a OneClient as EchoServerOneClient.
// You can pass a shared OneClient object created by NewOneClientForEchoServer.
func NewEchoServerOneClient(oneclient *client.OneClient) *EchoServerOneClient {
	return &EchoServerOneClient{
		serviceName: "EchoServer",
		oneclient:   oneclient,
	}
}

// ======================================================

// Echo is client rpc method as defined
func (c *EchoServerOneClient) Echo(ctx context.Context, args *EchoRequest) (reply *EchoResponse, err error) {
	reply = &EchoResponse{}
	err = c.oneclient.Call(ctx, c.serviceName, "Echo", args, reply)
	return reply, err
}
