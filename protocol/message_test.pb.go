// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message_test.proto

package protocol

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TestProto struct {
	A int32 `protobuf:"varint,1,req,name=A" json:"A"`
	B int32 `protobuf:"varint,2,opt,name=B" json:"B"`
}

func (m *TestProto) Reset()         { *m = TestProto{} }
func (m *TestProto) String() string { return proto.CompactTextString(m) }
func (*TestProto) ProtoMessage()    {}
func (*TestProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df2290959daf7b8, []int{0}
}
func (m *TestProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestProto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestProto.Merge(m, src)
}
func (m *TestProto) XXX_Size() int {
	return m.Size()
}
func (m *TestProto) XXX_DiscardUnknown() {
	xxx_messageInfo_TestProto.DiscardUnknown(m)
}

var xxx_messageInfo_TestProto proto.InternalMessageInfo

func (m *TestProto) GetA() int32 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *TestProto) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

func init() {
	proto.RegisterType((*TestProto)(nil), "flare.rpc.policy.TestProto")
}

func init() { proto.RegisterFile("message_test.proto", fileDescriptor_1df2290959daf7b8) }

var fileDescriptor_1df2290959daf7b8 = []byte{
	// 179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xca, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0x4f, 0x8d, 0x2f, 0x49, 0x2d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12,
	0x48, 0xcb, 0x49, 0x2c, 0x4a, 0xd5, 0x2b, 0x2a, 0x48, 0xd6, 0x2b, 0xc8, 0xcf, 0xc9, 0x4c, 0xae,
	0x54, 0x32, 0xe6, 0xe2, 0x0c, 0x49, 0x2d, 0x2e, 0x09, 0x00, 0x4b, 0x0b, 0x71, 0x31, 0x3a, 0x4a,
	0x30, 0x2a, 0x30, 0x69, 0xb0, 0x3a, 0xb1, 0x9c, 0xb8, 0x27, 0xcf, 0x10, 0xc4, 0xe8, 0x08, 0x12,
	0x73, 0x92, 0x60, 0x52, 0x60, 0x44, 0x88, 0x39, 0x39, 0xa5, 0x9d, 0x78, 0x24, 0xc7, 0x78, 0xe1,
	0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70,
	0xe3, 0xb1, 0x1c, 0x03, 0x97, 0x48, 0x72, 0x7e, 0xae, 0x1e, 0xba, 0x25, 0x4e, 0xbc, 0x6e, 0x20,
	0x91, 0xa0, 0x82, 0x64, 0xb0, 0x35, 0x1e, 0x8c, 0x51, 0xaa, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49,
	0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x60, 0xd5, 0xba, 0x45, 0x05, 0xc9, 0x10, 0x56, 0x7a, 0xbe, 0x3e,
	0xd8, 0xad, 0xc9, 0xf9, 0x39, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc9, 0xa8, 0xee, 0x64, 0xc3,
	0x00, 0x00, 0x00,
}

func (m *TestProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestProto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestProto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintMessageTest(dAtA, i, uint64(m.B))
	i--
	dAtA[i] = 0x10
	i = encodeVarintMessageTest(dAtA, i, uint64(m.A))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintMessageTest(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessageTest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TestProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovMessageTest(uint64(m.A))
	n += 1 + sovMessageTest(uint64(m.B))
	return n
}

func sovMessageTest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessageTest(x uint64) (n int) {
	return sovMessageTest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TestProto) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			m.A = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.A |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			m.B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.B |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessageTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("A")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessageTest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessageTest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessageTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessageTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessageTest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessageTest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessageTest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessageTest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessageTest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessageTest = fmt.Errorf("proto: unexpected end of group")
)
