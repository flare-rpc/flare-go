// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: options.proto

package protocol

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TalkType int32

const (
	TalkType_TALK_TYPE_NORMAL TalkType = 0
	TalkType_TALK_TYPE_ONEWAY TalkType = 1
)

var TalkType_name = map[int32]string{
	0: "TALK_TYPE_NORMAL",
	1: "TALK_TYPE_ONEWAY",
}

var TalkType_value = map[string]int32{
	"TALK_TYPE_NORMAL": 0,
	"TALK_TYPE_ONEWAY": 1,
}

func (x TalkType) Enum() *TalkType {
	p := new(TalkType)
	*p = x
	return p
}

func (x TalkType) String() string {
	return proto.EnumName(TalkType_name, int32(x))
}

func (x *TalkType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TalkType_value, data, "TalkType")
	if err != nil {
		return err
	}
	*x = TalkType(value)
	return nil
}

func (TalkType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_110d40819f1994f9, []int{0}
}

type ConnectionType int32

const (
	// bit-exclusive values since we may OR them to represent supported types.
	ConnectionType_CONNECTION_TYPE_UNKNOWN ConnectionType = 0
	ConnectionType_CONNECTION_TYPE_SINGLE  ConnectionType = 1
	ConnectionType_CONNECTION_TYPE_POOLED  ConnectionType = 2
	ConnectionType_CONNECTION_TYPE_SHORT   ConnectionType = 4
)

var ConnectionType_name = map[int32]string{
	0: "CONNECTION_TYPE_UNKNOWN",
	1: "CONNECTION_TYPE_SINGLE",
	2: "CONNECTION_TYPE_POOLED",
	4: "CONNECTION_TYPE_SHORT",
}

var ConnectionType_value = map[string]int32{
	"CONNECTION_TYPE_UNKNOWN": 0,
	"CONNECTION_TYPE_SINGLE":  1,
	"CONNECTION_TYPE_POOLED":  2,
	"CONNECTION_TYPE_SHORT":   4,
}

func (x ConnectionType) Enum() *ConnectionType {
	p := new(ConnectionType)
	*p = x
	return p
}

func (x ConnectionType) String() string {
	return proto.EnumName(ConnectionType_name, int32(x))
}

func (x *ConnectionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ConnectionType_value, data, "ConnectionType")
	if err != nil {
		return err
	}
	*x = ConnectionType(value)
	return nil
}

func (ConnectionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_110d40819f1994f9, []int{1}
}

type SerializeType int32

const (
	SerializeType_SerializeNone SerializeType = 0
	// JSON for payload.
	SerializeType_JSON SerializeType = 1
	// ProtoBuffer for payload.
	SerializeType_ProtoBuffer SerializeType = 2
	// MsgPack for payload
	SerializeType_MsgPack SerializeType = 3
	// Thrift
	// Thrift for payload
	SerializeType_Thrift SerializeType = 4
)

var SerializeType_name = map[int32]string{
	0: "SerializeNone",
	1: "JSON",
	2: "ProtoBuffer",
	3: "MsgPack",
	4: "Thrift",
}

var SerializeType_value = map[string]int32{
	"SerializeNone": 0,
	"JSON":          1,
	"ProtoBuffer":   2,
	"MsgPack":       3,
	"Thrift":        4,
}

func (x SerializeType) Enum() *SerializeType {
	p := new(SerializeType)
	*p = x
	return p
}

func (x SerializeType) String() string {
	return proto.EnumName(SerializeType_name, int32(x))
}

func (x *SerializeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SerializeType_value, data, "SerializeType")
	if err != nil {
		return err
	}
	*x = SerializeType(value)
	return nil
}

func (SerializeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_110d40819f1994f9, []int{2}
}

type ProtocolType int32

const (
	ProtocolType_PROTOCOL_UNKNOWN           ProtocolType = 0
	ProtocolType_PROTOCOL_BAIDU_STD         ProtocolType = 1
	ProtocolType_PROTOCOL_STREAMING_RPC     ProtocolType = 2
	ProtocolType_PROTOCOL_HULU_PBRPC        ProtocolType = 3
	ProtocolType_PROTOCOL_SOFA_PBRPC        ProtocolType = 4
	ProtocolType_PROTOCOL_RTMP              ProtocolType = 5
	ProtocolType_PROTOCOL_THRIFT            ProtocolType = 6
	ProtocolType_PROTOCOL_HTTP              ProtocolType = 7
	ProtocolType_PROTOCOL_PUBLIC_PBRPC      ProtocolType = 8
	ProtocolType_PROTOCOL_NOVA_PBRPC        ProtocolType = 9
	ProtocolType_PROTOCOL_REDIS             ProtocolType = 10
	ProtocolType_PROTOCOL_NSHEAD_CLIENT     ProtocolType = 11
	ProtocolType_PROTOCOL_NSHEAD            ProtocolType = 12
	ProtocolType_PROTOCOL_HADOOP_RPC        ProtocolType = 13
	ProtocolType_PROTOCOL_HADOOP_SERVER_RPC ProtocolType = 14
	ProtocolType_PROTOCOL_MONGO             ProtocolType = 15
	ProtocolType_PROTOCOL_UBRPC_COMPACK     ProtocolType = 16
	ProtocolType_PROTOCOL_DIDX_CLIENT       ProtocolType = 17
	ProtocolType_PROTOCOL_MEMCACHE          ProtocolType = 18
	ProtocolType_PROTOCOL_ITP               ProtocolType = 19
	ProtocolType_PROTOCOL_NSHEAD_MCPACK     ProtocolType = 20
	ProtocolType_PROTOCOL_DISP_IDL          ProtocolType = 21
	ProtocolType_PROTOCOL_ERSDA_CLIENT      ProtocolType = 22
	ProtocolType_PROTOCOL_UBRPC_MCPACK2     ProtocolType = 23
	// Reserve special protocol for cds-agent, which depends on FIFO right now
	ProtocolType_PROTOCOL_CDS_AGENT ProtocolType = 24
	ProtocolType_PROTOCOL_ESP       ProtocolType = 25
	ProtocolType_PROTOCOL_H2        ProtocolType = 26
)

var ProtocolType_name = map[int32]string{
	0:  "PROTOCOL_UNKNOWN",
	1:  "PROTOCOL_BAIDU_STD",
	2:  "PROTOCOL_STREAMING_RPC",
	3:  "PROTOCOL_HULU_PBRPC",
	4:  "PROTOCOL_SOFA_PBRPC",
	5:  "PROTOCOL_RTMP",
	6:  "PROTOCOL_THRIFT",
	7:  "PROTOCOL_HTTP",
	8:  "PROTOCOL_PUBLIC_PBRPC",
	9:  "PROTOCOL_NOVA_PBRPC",
	10: "PROTOCOL_REDIS",
	11: "PROTOCOL_NSHEAD_CLIENT",
	12: "PROTOCOL_NSHEAD",
	13: "PROTOCOL_HADOOP_RPC",
	14: "PROTOCOL_HADOOP_SERVER_RPC",
	15: "PROTOCOL_MONGO",
	16: "PROTOCOL_UBRPC_COMPACK",
	17: "PROTOCOL_DIDX_CLIENT",
	18: "PROTOCOL_MEMCACHE",
	19: "PROTOCOL_ITP",
	20: "PROTOCOL_NSHEAD_MCPACK",
	21: "PROTOCOL_DISP_IDL",
	22: "PROTOCOL_ERSDA_CLIENT",
	23: "PROTOCOL_UBRPC_MCPACK2",
	24: "PROTOCOL_CDS_AGENT",
	25: "PROTOCOL_ESP",
	26: "PROTOCOL_H2",
}

var ProtocolType_value = map[string]int32{
	"PROTOCOL_UNKNOWN":           0,
	"PROTOCOL_BAIDU_STD":         1,
	"PROTOCOL_STREAMING_RPC":     2,
	"PROTOCOL_HULU_PBRPC":        3,
	"PROTOCOL_SOFA_PBRPC":        4,
	"PROTOCOL_RTMP":              5,
	"PROTOCOL_THRIFT":            6,
	"PROTOCOL_HTTP":              7,
	"PROTOCOL_PUBLIC_PBRPC":      8,
	"PROTOCOL_NOVA_PBRPC":        9,
	"PROTOCOL_REDIS":             10,
	"PROTOCOL_NSHEAD_CLIENT":     11,
	"PROTOCOL_NSHEAD":            12,
	"PROTOCOL_HADOOP_RPC":        13,
	"PROTOCOL_HADOOP_SERVER_RPC": 14,
	"PROTOCOL_MONGO":             15,
	"PROTOCOL_UBRPC_COMPACK":     16,
	"PROTOCOL_DIDX_CLIENT":       17,
	"PROTOCOL_MEMCACHE":          18,
	"PROTOCOL_ITP":               19,
	"PROTOCOL_NSHEAD_MCPACK":     20,
	"PROTOCOL_DISP_IDL":          21,
	"PROTOCOL_ERSDA_CLIENT":      22,
	"PROTOCOL_UBRPC_MCPACK2":     23,
	"PROTOCOL_CDS_AGENT":         24,
	"PROTOCOL_ESP":               25,
	"PROTOCOL_H2":                26,
}

func (x ProtocolType) Enum() *ProtocolType {
	p := new(ProtocolType)
	*p = x
	return p
}

func (x ProtocolType) String() string {
	return proto.EnumName(ProtocolType_name, int32(x))
}

func (x *ProtocolType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProtocolType_value, data, "ProtocolType")
	if err != nil {
		return err
	}
	*x = ProtocolType(value)
	return nil
}

func (ProtocolType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_110d40819f1994f9, []int{3}
}

type CompressType int32

const (
	CompressType_COMPRESS_TYPE_NONE   CompressType = 0
	CompressType_COMPRESS_TYPE_SNAPPY CompressType = 1
	CompressType_COMPRESS_TYPE_GZIP   CompressType = 2
	CompressType_COMPRESS_TYPE_ZLIB   CompressType = 3
	CompressType_COMPRESS_TYPE_LZ4    CompressType = 4
)

var CompressType_name = map[int32]string{
	0: "COMPRESS_TYPE_NONE",
	1: "COMPRESS_TYPE_SNAPPY",
	2: "COMPRESS_TYPE_GZIP",
	3: "COMPRESS_TYPE_ZLIB",
	4: "COMPRESS_TYPE_LZ4",
}

var CompressType_value = map[string]int32{
	"COMPRESS_TYPE_NONE":   0,
	"COMPRESS_TYPE_SNAPPY": 1,
	"COMPRESS_TYPE_GZIP":   2,
	"COMPRESS_TYPE_ZLIB":   3,
	"COMPRESS_TYPE_LZ4":    4,
}

func (x CompressType) Enum() *CompressType {
	p := new(CompressType)
	*p = x
	return p
}

func (x CompressType) String() string {
	return proto.EnumName(CompressType_name, int32(x))
}

func (x *CompressType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CompressType_value, data, "CompressType")
	if err != nil {
		return err
	}
	*x = CompressType(value)
	return nil
}

func (CompressType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_110d40819f1994f9, []int{4}
}

type ChunkInfo struct {
	StreamId int64 `protobuf:"varint,1,req,name=stream_id,json=streamId" json:"stream_id"`
	ChunkId  int64 `protobuf:"varint,2,req,name=chunk_id,json=chunkId" json:"chunk_id"`
}

func (m *ChunkInfo) Reset()         { *m = ChunkInfo{} }
func (m *ChunkInfo) String() string { return proto.CompactTextString(m) }
func (*ChunkInfo) ProtoMessage()    {}
func (*ChunkInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_110d40819f1994f9, []int{0}
}
func (m *ChunkInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChunkInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChunkInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChunkInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkInfo.Merge(m, src)
}
func (m *ChunkInfo) XXX_Size() int {
	return m.Size()
}
func (m *ChunkInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkInfo proto.InternalMessageInfo

func (m *ChunkInfo) GetStreamId() int64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func (m *ChunkInfo) GetChunkId() int64 {
	if m != nil {
		return m.ChunkId
	}
	return 0
}

var E_ServiceTimeout = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.ServiceOptions)(nil),
	ExtensionType: (*int64)(nil),
	Field:         90000,
	Name:          "flare.rpc.service_timeout",
	Tag:           "varint,90000,opt,name=service_timeout,def=10000",
	Filename:      "options.proto",
}

var E_RequestTalkType = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MethodOptions)(nil),
	ExtensionType: (*TalkType)(nil),
	Field:         90001,
	Name:          "flare.rpc.request_talk_type",
	Tag:           "varint,90001,opt,name=request_talk_type,enum=flare.rpc.TalkType,def=0",
	Filename:      "options.proto",
}

var E_ResponseTalkType = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MethodOptions)(nil),
	ExtensionType: (*TalkType)(nil),
	Field:         90002,
	Name:          "flare.rpc.response_talk_type",
	Tag:           "varint,90002,opt,name=response_talk_type,enum=flare.rpc.TalkType,def=0",
	Filename:      "options.proto",
}

var E_MethodTimeout = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MethodOptions)(nil),
	ExtensionType: (*int64)(nil),
	Field:         90003,
	Name:          "flare.rpc.method_timeout",
	Tag:           "varint,90003,opt,name=method_timeout",
	Filename:      "options.proto",
}

var E_RequestCompression = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MethodOptions)(nil),
	ExtensionType: (*CompressType)(nil),
	Field:         90004,
	Name:          "flare.rpc.request_compression",
	Tag:           "varint,90004,opt,name=request_compression,enum=flare.rpc.CompressType,def=0",
	Filename:      "options.proto",
}

var E_ResponseCompression = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MethodOptions)(nil),
	ExtensionType: (*CompressType)(nil),
	Field:         90005,
	Name:          "flare.rpc.response_compression",
	Tag:           "varint,90005,opt,name=response_compression,enum=flare.rpc.CompressType,def=0",
	Filename:      "options.proto",
}

func init() {
	proto.RegisterEnum("flare.rpc.TalkType", TalkType_name, TalkType_value)
	proto.RegisterEnum("flare.rpc.ConnectionType", ConnectionType_name, ConnectionType_value)
	proto.RegisterEnum("flare.rpc.SerializeType", SerializeType_name, SerializeType_value)
	proto.RegisterEnum("flare.rpc.ProtocolType", ProtocolType_name, ProtocolType_value)
	proto.RegisterEnum("flare.rpc.CompressType", CompressType_name, CompressType_value)
	proto.RegisterType((*ChunkInfo)(nil), "flare.rpc.ChunkInfo")
	proto.RegisterExtension(E_ServiceTimeout)
	proto.RegisterExtension(E_RequestTalkType)
	proto.RegisterExtension(E_ResponseTalkType)
	proto.RegisterExtension(E_MethodTimeout)
	proto.RegisterExtension(E_RequestCompression)
	proto.RegisterExtension(E_ResponseCompression)
}

func init() { proto.RegisterFile("options.proto", fileDescriptor_110d40819f1994f9) }

var fileDescriptor_110d40819f1994f9 = []byte{
	// 919 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x4f, 0x6f, 0xe2, 0x46,
	0x1c, 0xc5, 0x40, 0x36, 0x64, 0x12, 0x60, 0x32, 0xe4, 0xdf, 0xa6, 0x12, 0x49, 0x2b, 0x55, 0x5a,
	0x21, 0x95, 0xa4, 0x51, 0xd5, 0x03, 0x37, 0x63, 0x7b, 0xc1, 0x8d, 0xed, 0x99, 0xda, 0x43, 0xb6,
	0xc9, 0xc5, 0x62, 0xcd, 0x40, 0xac, 0x00, 0x43, 0x6d, 0x53, 0xa9, 0x3d, 0x54, 0x7b, 0xeb, 0xb1,
	0xdb, 0x7f, 0x9f, 0xa7, 0xd7, 0x3d, 0xee, 0xb1, 0xa7, 0xaa, 0x4a, 0xbe, 0x48, 0x65, 0x1b, 0x3b,
	0x78, 0x89, 0x14, 0x65, 0x6f, 0xe8, 0xbd, 0xdf, 0xbc, 0xf7, 0x7b, 0x4f, 0xc3, 0x18, 0x94, 0xf9,
	0x2c, 0x70, 0xf9, 0xd4, 0x6f, 0xce, 0x3c, 0x1e, 0x70, 0xb4, 0x31, 0x1c, 0xf7, 0x3d, 0xd6, 0xf4,
	0x66, 0xce, 0xe1, 0xf1, 0x88, 0xf3, 0xd1, 0x98, 0x9d, 0x44, 0xc4, 0xeb, 0xf9, 0xf0, 0x64, 0xc0,
	0x7c, 0xc7, 0x73, 0x67, 0x01, 0xf7, 0xe2, 0xe1, 0xcf, 0x30, 0xd8, 0x90, 0xae, 0xe7, 0xd3, 0x1b,
	0x75, 0x3a, 0xe4, 0xe8, 0x53, 0xb0, 0xe1, 0x07, 0x1e, 0xeb, 0x4f, 0x6c, 0x77, 0x70, 0x20, 0x1c,
	0xe7, 0x5f, 0x14, 0xda, 0xc5, 0x77, 0xff, 0x1e, 0xe5, 0xcc, 0x52, 0x0c, 0xab, 0x03, 0x74, 0x04,
	0x4a, 0x4e, 0x38, 0x1f, 0x4e, 0xe4, 0x97, 0x26, 0xd6, 0x23, 0x54, 0x1d, 0x34, 0xbe, 0x06, 0x25,
	0xda, 0x1f, 0xdf, 0xd0, 0x1f, 0x67, 0x0c, 0xed, 0x00, 0x48, 0x45, 0xed, 0xdc, 0xa6, 0x97, 0x44,
	0xb1, 0x0d, 0x6c, 0xea, 0xa2, 0x06, 0x73, 0x59, 0x14, 0x1b, 0xca, 0x2b, 0xf1, 0x12, 0x0a, 0x8d,
	0x37, 0x02, 0xa8, 0x48, 0x7c, 0x3a, 0x65, 0x4e, 0x98, 0x25, 0x3a, 0xfe, 0x09, 0xd8, 0x97, 0xb0,
	0x61, 0x28, 0x12, 0x55, 0xb1, 0x11, 0x8f, 0xf7, 0x8c, 0x73, 0x03, 0xbf, 0x32, 0x60, 0x0e, 0x1d,
	0x82, 0xbd, 0x0f, 0x49, 0x4b, 0x35, 0x3a, 0x9a, 0x02, 0x85, 0x87, 0x38, 0x82, 0xb1, 0xa6, 0xc8,
	0x30, 0x8f, 0x9e, 0x83, 0xdd, 0x95, 0x73, 0x5d, 0x6c, 0x52, 0x58, 0x6c, 0x5c, 0x80, 0xb2, 0xc5,
	0x3c, 0xb7, 0x3f, 0x76, 0x7f, 0x62, 0xd1, 0x02, 0xdb, 0x4b, 0x80, 0xc1, 0xa7, 0x0c, 0xe6, 0x50,
	0x09, 0x14, 0xbf, 0xb1, 0xb0, 0x01, 0x05, 0x54, 0x05, 0x9b, 0x24, 0xac, 0xb0, 0x3d, 0x1f, 0x0e,
	0x99, 0x07, 0xf3, 0x68, 0x13, 0xac, 0xeb, 0xfe, 0x88, 0xf4, 0x9d, 0x1b, 0x58, 0x40, 0x00, 0x3c,
	0xa3, 0xd7, 0x9e, 0x3b, 0x0c, 0x60, 0xb1, 0xf1, 0xeb, 0x1a, 0xd8, 0x8a, 0x46, 0x1d, 0x3e, 0x4e,
	0x7a, 0x21, 0x26, 0xa6, 0x58, 0xc2, 0xda, 0x52, 0xa2, 0x3d, 0x80, 0x52, 0xb4, 0x2d, 0xaa, 0x72,
	0xcf, 0xb6, 0xa8, 0x1c, 0xa7, 0x49, 0x71, 0x8b, 0x9a, 0x8a, 0xa8, 0xab, 0x46, 0xc7, 0x36, 0x89,
	0x04, 0xf3, 0x68, 0x1f, 0xd4, 0x52, 0xae, 0xdb, 0xd3, 0x7a, 0x36, 0x69, 0x87, 0x44, 0x21, 0x43,
	0x58, 0xf8, 0xa5, 0xb8, 0x20, 0x8a, 0x61, 0xa6, 0x94, 0x30, 0xa9, 0x4e, 0xe0, 0x1a, 0xaa, 0x81,
	0x6a, 0x0a, 0xd1, 0xae, 0xa9, 0xbe, 0xa4, 0xf0, 0x59, 0x66, 0xae, 0x4b, 0x29, 0x81, 0xeb, 0x61,
	0x75, 0x29, 0x44, 0x7a, 0x6d, 0x4d, 0x95, 0x16, 0xaa, 0xa5, 0x8c, 0x9d, 0x81, 0x2f, 0x12, 0xbb,
	0x0d, 0x84, 0x40, 0xe5, 0xde, 0x4e, 0x91, 0x55, 0x0b, 0x82, 0x4c, 0x20, 0xc3, 0xea, 0x2a, 0xa2,
	0x6c, 0x4b, 0x9a, 0xaa, 0x18, 0x14, 0x6e, 0x66, 0x76, 0x89, 0x39, 0xb8, 0x95, 0x4d, 0x29, 0xca,
	0x18, 0x93, 0x28, 0x7e, 0x19, 0xd5, 0xc1, 0xe1, 0x87, 0x84, 0xa5, 0x98, 0x17, 0x8a, 0x19, 0xf1,
	0x95, 0x8c, 0xbb, 0x8e, 0x8d, 0x0e, 0x86, 0xd5, 0x8c, 0x7b, 0x2f, 0xdc, 0xd2, 0x96, 0xb0, 0x4e,
	0x44, 0xe9, 0x1c, 0x42, 0x74, 0x00, 0x76, 0x52, 0x4e, 0x56, 0xe5, 0xef, 0x92, 0xbd, 0xb6, 0xd1,
	0x2e, 0xd8, 0xbe, 0x57, 0x52, 0x74, 0x49, 0x94, 0xba, 0x0a, 0x44, 0x08, 0x82, 0xad, 0x14, 0x56,
	0x29, 0x81, 0xb5, 0x87, 0xc2, 0xe9, 0x52, 0x24, 0xbf, 0x93, 0x11, 0x91, 0x55, 0x8b, 0xd8, 0xaa,
	0xac, 0xc1, 0xdd, 0x4c, 0xaf, 0x8a, 0x69, 0xc9, 0x62, 0x62, 0xbb, 0xf7, 0xc0, 0xb2, 0xb1, 0xd8,
	0x19, 0xdc, 0xcf, 0xdc, 0x17, 0x49, 0xb6, 0x6c, 0xb1, 0x13, 0x9e, 0x39, 0xc8, 0xec, 0xa4, 0x58,
	0x04, 0x3e, 0x8f, 0xae, 0x6a, 0x5a, 0xd3, 0x19, 0x3c, 0x6c, 0xfc, 0x22, 0x80, 0x2d, 0x89, 0x4f,
	0x66, 0x1e, 0xf3, 0xfd, 0xe8, 0x46, 0xee, 0x01, 0x14, 0xb6, 0x60, 0x2a, 0x96, 0x95, 0xfc, 0x5b,
	0x0d, 0x05, 0xe6, 0xc2, 0x42, 0xb2, 0xb8, 0x65, 0x88, 0x84, 0x5c, 0x42, 0x61, 0xf5, 0x44, 0xe7,
	0x4a, 0x25, 0x30, 0xbf, 0x8a, 0x5f, 0x69, 0x6a, 0x1b, 0x16, 0xc2, 0xec, 0x59, 0x5c, 0xbb, 0xfa,
	0x0a, 0x16, 0x5b, 0xdf, 0x82, 0xaa, 0xcf, 0xbc, 0x1f, 0x5c, 0x87, 0xd9, 0x81, 0x3b, 0x61, 0x7c,
	0x1e, 0xa0, 0xa3, 0x66, 0xfc, 0x6a, 0x35, 0x93, 0x57, 0xab, 0x69, 0xc5, 0x13, 0x38, 0x7e, 0xe6,
	0x0e, 0xde, 0xfe, 0xbd, 0x76, 0x2c, 0xbc, 0x28, 0xb4, 0xd6, 0xbe, 0x3c, 0x3d, 0x3d, 0x3d, 0x35,
	0x2b, 0x0b, 0x01, 0x1a, 0x9f, 0x6f, 0xf9, 0x60, 0xdb, 0x63, 0xdf, 0xcf, 0x99, 0x1f, 0xd8, 0x41,
	0x7f, 0x7c, 0x63, 0x07, 0x61, 0xc0, 0xfa, 0x8a, 0xa8, 0xce, 0x82, 0x6b, 0x3e, 0x48, 0x34, 0x7f,
	0x8b, 0x34, 0x2b, 0x67, 0xb5, 0x66, 0xfa, 0x7a, 0x36, 0x93, 0x77, 0xac, 0xb5, 0xf2, 0x8a, 0x99,
	0xd5, 0x85, 0x43, 0x3a, 0x32, 0x07, 0xc8, 0x63, 0xfe, 0x8c, 0x4f, 0x7d, 0xf6, 0x04, 0xd7, 0xdf,
	0x9f, 0xe6, 0x0a, 0x13, 0x8b, 0x74, 0xa6, 0x03, 0x2a, 0x93, 0x48, 0x31, 0x6d, 0xef, 0x31, 0xcb,
	0x3f, 0xe2, 0xf2, 0xcc, 0x72, 0x7c, 0x2e, 0x29, 0xed, 0x67, 0x50, 0x4b, 0x4a, 0x73, 0x16, 0x17,
	0xc3, 0xe5, 0xd3, 0x47, 0xd5, 0xfe, 0x5c, 0x04, 0xd8, 0x5f, 0x0a, 0xb0, 0x7c, 0xb1, 0x5a, 0x0f,
	0x5c, 0x2b, 0x13, 0x2d, 0x9c, 0xa4, 0x7b, 0xa3, 0xd6, 0x1b, 0x01, 0xec, 0xa4, 0x05, 0x3e, 0x65,
	0x83, 0xbf, 0x3e, 0x66, 0x83, 0x5a, 0x62, 0xb5, 0xb4, 0x42, 0xfb, 0xf2, 0xdd, 0x6d, 0x5d, 0x78,
	0x7f, 0x5b, 0x17, 0xfe, 0xbb, 0xad, 0x0b, 0x6f, 0xef, 0xea, 0xb9, 0xf7, 0x77, 0xf5, 0xdc, 0x3f,
	0x77, 0xf5, 0x1c, 0x28, 0x3b, 0x7c, 0x12, 0x09, 0x47, 0x16, 0xed, 0xf5, 0x85, 0x77, 0x57, 0xb8,
	0xfa, 0x7c, 0xe4, 0x06, 0xd7, 0xf3, 0xd7, 0x4d, 0x87, 0x4f, 0x4e, 0x22, 0xf2, 0x0b, 0x6f, 0xe6,
	0xc4, 0xbf, 0x46, 0x3c, 0xfe, 0xec, 0x3a, 0x7c, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x07,
	0xee, 0x15, 0x74, 0xa2, 0x07, 0x00, 0x00,
}

func (m *ChunkInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChunkInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChunkInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintOptions(dAtA, i, uint64(m.ChunkId))
	i--
	dAtA[i] = 0x10
	i = encodeVarintOptions(dAtA, i, uint64(m.StreamId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintOptions(dAtA []byte, offset int, v uint64) int {
	offset -= sovOptions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChunkInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOptions(uint64(m.StreamId))
	n += 1 + sovOptions(uint64(m.ChunkId))
	return n
}

func sovOptions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOptions(x uint64) (n int) {
	return sovOptions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChunkInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChunkInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChunkInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			m.StreamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkId", wireType)
			}
			m.ChunkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("stream_id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("chunk_id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOptions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOptions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOptions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOptions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOptions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOptions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOptions = fmt.Errorf("proto: unexpected end of group")
)
